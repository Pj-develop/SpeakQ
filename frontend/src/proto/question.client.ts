// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "question.proto" (package "question", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { QuestionService } from "./question";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QuestionResponse } from "./question";
import type { QuestionRequest } from "./question";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service question.QuestionService
 */
export interface IQuestionServiceClient {
    /**
     * @generated from protobuf rpc: GetQuestions(question.QuestionRequest) returns (question.QuestionResponse);
     */
    getQuestions(input: QuestionRequest, options?: RpcOptions): UnaryCall<QuestionRequest, QuestionResponse>;
}
/**
 * @generated from protobuf service question.QuestionService
 */
export class QuestionServiceClient implements IQuestionServiceClient, ServiceInfo {
    typeName = QuestionService.typeName;
    methods = QuestionService.methods;
    options = QuestionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetQuestions(question.QuestionRequest) returns (question.QuestionResponse);
     */
    getQuestions(input: QuestionRequest, options?: RpcOptions): UnaryCall<QuestionRequest, QuestionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QuestionRequest, QuestionResponse>("unary", this._transport, method, opt, input);
    }
}
